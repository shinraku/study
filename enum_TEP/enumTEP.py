import time
import sys

sys.setrecursionlimit(5000)

class TEP():
    def __init__(self):
        """ ノードのつながりを辞書型で表現する """
        self.adjacency_dict = {}
    
    def add_vertex(self, v):
        """ ノードを追加する """
        self.adjacency_dict[v] = []
    def add_edge(self, v1, v2, color):
        """ ノード同士をつなぐ。"""
        self.adjacency_dict[v1].append([v2, color])
    def remove_edge(self, v1, v2, color):
        """ ノード同士のつながりを削除する。"""
        self.adjacency_dict[v1].remove([v2, color])
    def remove_vertex(self,v):
        """ ノードを削除する。"""
        while self.adjacency_dict[v] != []:
            adjacent_vertex = self.adjacency_dict[v][-1]
            self.remove_edge(v, adjacent_vertex)
        del self.adjacency_dict[v]
    
    def print_TEP(self):
        print(self.adjacency_dict)

def borderList(vertex, SorE):
    """各色の区間の区切りの近傍を出力
    Star : 時計回りに区間の最初の近傍リスト(昇順)
    End : 時計回りに区間の最後の近傍リスト(降順)"""
    startList = []
    endList = []
    for i in range(len(vertex)):
        if i+1 >= len(vertex):
            nextColorKey = 0
        else:
            nextColorKey = i+1

        prevColorKey = i-1
        
        if vertex[i][1] != vertex[nextColorKey][1]:
            endList.append(vertex[i])
        if vertex[i][1] != vertex[prevColorKey][1]:
            startList.append(vertex[i])
    
    startList.sort()
    endList.sort()

    if SorE == 'S':
        return startList
    else:
        return endList

def ccwBorderEdge(vertex, currentNeighbor):
    """反時計回りに色の切り替わる近傍を返す"""
    currentNum = vertex.index(currentNeighbor)
    for i in range(len(vertex)):
        if vertex[currentNum][1] != vertex[currentNum-1][1]:
            return vertex[currentNum-1]
        currentNum -= 1

def cwBorderEdge(vertex, currentNeighbor):
    """時計回りに色の切り替わる近傍を返す"""
    currentNum = -1 * (len(vertex) - vertex.index(currentNeighbor))
    for i in range(len(vertex)):
        if vertex[currentNum][1] != vertex[currentNum+1][1]:
            return vertex[currentNum+1]
        currentNum += 1

def serchMAXLeftA4C(T):
    """辞書式順序で最も大きいleft alternating 4-cycleを探索"""
    leftAlt4Cycle = []
    for n in range(5, len(T)):
        v1BorderList = borderList(T[n], 'S')
        for i in range(4):
            if v1BorderList[i][0] > n:
                #print(n, v1BorderList)
                #print(v1BorderList[i][0], T[v1BorderList[i][0]])
                v2Border = cwBorderEdge(T[v1BorderList[i][0]], [n, v1BorderList[i][1]])
                if v2Border[0] > n:
                    v3Border = cwBorderEdge(T[v2Border[0]], [v1BorderList[i][0], v2Border[1]])
                    if v3Border[0] > n and cwBorderEdge(T[v3Border[0]], [v2Border[0], v3Border[1]]) == [n, v2Border[1]]:
                        if leftAlt4Cycle == []:
                            leftAlt4Cycle = [n, v3Border[0], v2Border[0], v1BorderList[i][0]]
                        else:
                            if ((leftAlt4Cycle[0] < n) or (leftAlt4Cycle[0] == n and leftAlt4Cycle[1] < v3Border[0])
                             or (leftAlt4Cycle[0] == n and leftAlt4Cycle[1] == v3Border[0] and leftAlt4Cycle[2] < v2Border[0])
                             or (leftAlt4Cycle[0] == n and leftAlt4Cycle[1] == v3Border[0] and leftAlt4Cycle[2] == v2Border[0] and leftAlt4Cycle[3] < v1BorderList[i][0])):
                                leftAlt4Cycle = [n, v3Border[0], v2Border[0], v1BorderList[i][0]]

    return leftAlt4Cycle

def swichColor(T, v1, v2):
    """(v1, v2)の色をスイッチする"""
    for index, neighbor in enumerate(T[v1]):
        if v2 in neighbor:
            v2Ind = index
            break
    for index, neighbor in enumerate(T[v2]):
        if v1 in neighbor:
            v1Ind = index
            break

    if T[v1][v2Ind][1] == 'r':
        T[v1][v2Ind][1] = 'b'
        T[v2][v1Ind][1] = 'b'
    else:
        T[v1][v2Ind][1] = 'r'
        T[v2][v1Ind][1] = 'r'
    return T

def recFlip(T, Alt4Cycle, alreadySwichVertices):
    flipNeighbors = []
    curFlipVertex = alreadySwichVertices[-1]
    for i in range(len(T[curFlipVertex])):
        if T[curFlipVertex][i][0] not in alreadySwichVertices:
            swichColor(T, curFlipVertex, T[curFlipVertex][i][0])
            flipNeighbors.append(T[curFlipVertex][i][0])

    for j in range(len(flipNeighbors)):
        if flipNeighbors[j] not in Alt4Cycle and flipNeighbors[j] not in alreadySwichVertices:
            alreadySwichVertices.append(flipNeighbors[j])
            recFlip(T, Alt4Cycle, alreadySwichVertices)
    return T

def flip(T, Alt4Cycle):
    """right alternating 4-cycleをフリップする"""
    for index, neighbor in enumerate(T[Alt4Cycle[0]]):
        if Alt4Cycle[1] in neighbor:
            leftNeighbor = -1 * (len(T[Alt4Cycle[0]]) - index) + 1
            break

    if T[Alt4Cycle[0]][leftNeighbor][0] == Alt4Cycle[2]:
        swichColor(T, Alt4Cycle[0], Alt4Cycle[2])
    elif T[Alt4Cycle[0]][leftNeighbor][0] == Alt4Cycle[3]:      
        swichColor(T, Alt4Cycle[1], Alt4Cycle[3])
    else:
        alreadySwichVertices = [T[Alt4Cycle[0]][leftNeighbor][0]]
        recFlip(T, Alt4Cycle, alreadySwichVertices)

maxdepth = 1

def findChildren(T, children, depth):
    """Tの子を作成する"""
    global maxdepth
    children.append(T)
    depth += 1
    if maxdepth < depth:
        maxdepth = depth
    for i in range(5,len(T)+1):
        v1BorderList = borderList(T[i], 'E')
        for j in range(4):
            if v1BorderList[j][0] > i:
                v2Border = ccwBorderEdge(T[v1BorderList[j][0]], [i, v1BorderList[j][1]])
                if v2Border[0] > i:
                    v3Border = ccwBorderEdge(T[v2Border[0]], [v1BorderList[j][0], v2Border[1]])
                    if v3Border[0] > i and ccwBorderEdge(T[v3Border[0]], [v2Border[0], v3Border[1]]) == [i, v2Border[1]]:
                        rightAlt4Cycle = [i, v1BorderList[j][0], v2Border[0], v3Border[0]]
                        flip(T, rightAlt4Cycle)
                        if serchMAXLeftA4C(T) == rightAlt4Cycle:
                                
                            print(len(children))
                            children = findChildren(T, children, depth)
                            
                        flip(T, rightAlt4Cycle)
    return children

def makeMaximal(T):
    LA4C = serchMAXLeftA4C(T)
    if LA4C != []:
        flip(T, LA4C)
        makeMaximal(T)

bicolorGraph = TEP()
"""
num = int(input("How many verteces ? : "))

for i in range(1, num+1):
    bicolorGraph.add_vertex(i)
    print("Input v_",i,"'s Neighbors and Colors")
    neighbors = input().split()
    for j in range(0, len(neighbors), 2):
        bicolorGraph.add_edge(i, int(neighbors[j]), neighbors[j+1])
"""
#bicolorGraph.adjacency_dict = {1: [[9, 'r'], [8, 'r'], [7, 'r'], [6, 'r'], [5, 'r'], [12, 'r'], [19, 'r'], [26, 'r']], 2: [[26, 'b'], [33, 'b'], [40, 'b'], [41, 'b'], [42, 'b'], [43, 'b']], 3: [[43, 'r'], [44, 'r'], [45, 'r'], [46, 'r'], [39, 'r'], [32, 'r'], [25, 'r'], [18, 'r']], 4: [[18, 'b'], [11, 'b'], [10, 'b'], [9, 'b']], 5: [[1, 'r'], [6, 'b'], [13, 'r'], [12, 'b']], 6: [[5, 'b'], [1, 'r'], [7, 'b'], [13, 'r']], 7: [[6, 'b'], [1, 'r'], [8, 'b'], [15, 'r'], [14, 'b'], [13, 'b']], 8: [[7, 'b'], [1, 'r'], [9, 'b'], [16, 'r'], [15, 'b']], 9: [[8, 'b'], [1, 'r'], [4, 'b'], [10, 'r'], [17, 'b'], [16, 'b']], 10: [[9, 'r'], [4, 'b'], [11, 'r'], [17, 'b']], 11: [[10, 'r'], [4, 'b'], [18, 'r'], [17, 'b']], 12: [[1, 'r'], [5, 'b'], [13, 'r'], [20, 'b'], [19, 'b']], 13: [[12, 'r'], [5, 'r'], [6, 'r'], [7, 'b'], [14, 'r'], [21, 'b'], [20, 'r']], 14: [[13, 'r'], [7, 'b'], [15, 'r'], [21, 'b']], 15: [[14, 'r'], [7, 'r'], [8, 'b'], [16, 'r'], [22, 'b'], [21, 'r']], 16: [[15, 'r'], [8, 'r'], [9, 'b'], [17, 'r'], [23, 'b'], [22, 'r']], 17: [[16, 'r'], [9, 'b'], [10, 'b'], [11, 'b'], [18, 'r'], [25, 'b'], [24, 'r'], [23, 'r']], 18: [[17, 'r'], [11, 'r'], [4, 'b'], [3, 'r'], [25, 'b']], 19: [[1, 'r'], [12, 'b'], [20, 'r'], [27, 'b'], [26, 'b']], 20: [[19, 'r'], [12, 'b'], [13, 'r'], [21, 'b'], [28, 'r'], [27, 'r']], 21: [[20, 'b'], [13, 'b'], [14, 'b'], [15, 'r'], [22, 'b'], [28, 'r']], 22: [[21, 'b'], [15, 'b'], [16, 'r'], [23, 'b'], [29, 'r'], [28, 'b']], 23: [[22, 'b'], [16, 'b'], [17, 'r'], [24, 'b'], [31, 'r'], [30, 'r'], [29, 'b']], 24: [[23, 'b'], [17, 'r'], [25, 'r'], [32, 'b'], [31, 'r']], 25: [[24, 'r'], [17, 'b'], [18, 'b'], [3, 'r'], [32, 'b']], 26: [[1, 'r'], [19, 'b'], [27, 'r'], [33, 'r'], [2, 'b']], 27: [[26, 'r'], [19, 'b'], [20, 'r'], [28, 'b'], [35, 'b'], [34, 'b'], [33, 'b']], 28: [[27, 'b'], [20, 'r'], [21, 'r'], [22, 'b'], [29, 'b'], [35, 'r']], 29: [[28, 'b'], [22, 'r'], [23, 'b'], [30, 'b'], [37, 'b'], [36, 'b'], [35, 'r']], 30: [[29, 'b'], [23, 'r'], [31, 'b'], [37, 'r']], 31: [[30, 'b'], [23, 'r'], [24, 'r'], [32, 'b'], [38, 'b'], [37, 'r']], 32: [[31, 'b'], [24, 'b'], [25, 'b'], [3, 'r'], [39, 'b'], [38, 'r']], 33: [[26, 'r'], [27, 'b'], [34, 'r'], [40, 'r'], [2, 'b']], 34: [[33, 'r'], [27, 'b'], [35, 'r'], [42, 'b'], [41, 'b'], [40, 'b']], 35: [[34, 'r'], [27, 'b'], [28, 'r'], [29, 'r'], [36, 'r'], [43, 'b'], [42, 'r']], 36: [[35, 'r'], [29, 'b'], [37, 'r'], [43, 'b']], 37: [[36, 'r'], [29, 'b'], [30, 'r'], [31, 'r'], [38, 'r'], [44, 'r'], [43, 'b']], 38: [[37, 'r'], [31, 'b'], [32, 'r'], [39, 'r'], [46, 'r'], [45, 'r'], [44, 'b']], 39: [[38, 'r'], [32, 'b'], [2, 'r'], [46, 'b']], 40: [[33, 'r'], [34, 'b'], [41, 'r'], [2, 'b']], 41: [[40, 'r'], [34, 'b'], [42, 'r'], [2, 'b']], 42: [[41, 'r'], [34, 'b'], [35, 'r'], [43, 'r'], [2, 'b']], 43: [[42, 'r'], [35, 'b'], [36, 'b'], [37, 'b'], [44, 'b'], [3, 'r'], [2, 'b']], 44: [[43, 'b'], [37, 'r'], [38, 'b'], [45, 'b'], [3, 'r']], 45: [[44, 'b'], [38, 'r'], [46, 'b'], [3, 'r']], 46: [[45, 'b'], [38, 'r'], [39, 'b'], [3, 'r']]}
#bicolorGraph.adjacency_dict = {1: [[5, 'r'], [6, 'r'], [9, 'r']], 2: [[9, 'b'], [17, 'b'], [20, 'b']], 3: [[20, 'r'], [19, 'r'], [14, 'r']], 4: [[14, 'b'], [8, 'b'], [5, 'b']], 5: [[1, 'r'], [4, 'b'], [8, 'r'], [7, 'b'], [6, 'b']], 6: [[1, 'r'], [5, 'b'], [7, 'r'], [10, 'r'], [9, 'b']], 7: [[6, 'r'], [5, 'b'], [8, 'b'], [13, 'r'], [12, 'b'], [11, 'b'], [10, 'b']], 8: [[7, 'b'], [5, 'r'], [4, 'b'], [14, 'r'], [13, 'b']], 9: [[1, 'r'], [6, 'b'], [10, 'r'], [17, 'r'], [2, 'b']], 10: [[9, 'r'], [6, 'r'], [7, 'b'], [11, 'r'], [15, 'r'], [18, 'r'], [17, 'b']], 11: [[10, 'r'], [7, 'b'], [12, 'r'], [15, 'b']], 12: [[11, 'r'], [7, 'b'], [13, 'r'], [16, 'b'], [15, 'r']], 13: [[12, 'r'], [7, 'r'], [8, 'b'], [14, 'r'], [19, 'r'], [18, 'b'], [16, 'r']], 14: [[13, 'r'], [8, 'r'], [4, 'b'], [3, 'r'], [19, 'b']], 15: [[10, 'r'], [11, 'b'], [12, 'r'], [16, 'r'], [18, 'b']], 16: [[15, 'r'], [12, 'b'], [13, 'r'], [18, 'b']], 17: [[9, 'r'], [10, 'b'], [18, 'b'], [20, 'r'], [2, 'b']], 18: [[17, 'b'], [10, 'r'], [15, 'b'], [16, 'b'], [13, 'b'], [19, 'r'], [20, 'b']], 19: [[18, 'r'], [13, 'r'], [14, 'b'], [3, 'r'], [20, 'b']], 20: [[17, 'r'], [18, 'b'], [19, 'b'], [3, 'r'], [2, 'b']]}
#bicolorGraph.adjacency_dict = {1: [[5, 'r'], [6, 'r'], [8, 'r']], 2: [[8, 'b'], [10, 'b'], [12, 'b']], 3: [[12, 'r'], [11, 'r'], [9, 'r']], 4: [[9, 'b'], [5, 'b']], 5: [[6, 'b'], [1, 'r'], [4, 'b'], [9, 'r'], [7, 'b']], 6: [[8, 'b'], [1, 'r'], [5, 'b'], [7, 'r'], [11, 'b'], [10, 'b']], 7: [[6, 'r'], [5, 'b'], [9, 'r'], [11, 'b']], 8: [[1, 'r'], [6, 'b'], [10, 'r'], [2, 'b']], 9: [[11, 'b'], [7, 'r'], [5, 'r'], [4, 'b'], [3, 'r']], 10: [[2, 'b'], [8, 'r'], [6, 'b'], [11, 'r'], [12, 'r']], 11: [[12, 'b'], [10, 'r'], [6, 'b'], [7, 'b'], [9, 'b'], [3, 'r']], 12: [[2, 'b'], [10, 'r'], [11, 'b'], [3, 'r']]}
#内部頂点12
#bicolorGraph.adjacency_dict = {1: [[6, 'r'], [5, 'r'], [7, 'r'], [9, 'r']], 2: [[9, 'b'], [11, 'b'], [14, 'b'], [16, 'b']], 3: [[16, 'r'], [15, 'r'], [13, 'r']], 4: [[13, 'b'], [10, 'b'], [8, 'b'], [6, 'b']], 5: [[1, 'r'], [6, 'b'], [8, 'r'], [7, 'b']], 6: [[5, 'b'], [1, 'r'], [4, 'b'], [8, 'r']], 7: [[1, 'r'], [5, 'b'], [8, 'b'], [10, 'r'], [9, 'b']], 8: [[7, 'b'], [5, 'r'], [6, 'r'], [4, 'b'], [10, 'r']], 9: [[1, 'r'], [7, 'b'], [10, 'r'], [11, 'r'], [2, 'b']], 10: [[9, 'r'], [7, 'r'], [8, 'r'], [4, 'b'], [13, 'r'], [12, 'b'], [11, 'b']], 11: [[9, 'r'], [10, 'b'], [12, 'r'], [14, 'r'], [2, 'b']], 12: [[11, 'r'], [10, 'b'], [13, 'r'], [15, 'b'], [14, 'b']], 13: [[12, 'r'], [10, 'r'], [4, 'b'], [3, 'r'], [15, 'b']], 14: [[11, 'r'], [12, 'b'], [15, 'r'], [16, 'r'], [2, 'b']], 15: [[14, 'r'], [12, 'b'], [13, 'b'], [3, 'r'], [16, 'b']], 16: [[14, 'r'], [15, 'b'], [3, 'r'], [2, 'b']]}
#内部頂点9
#bicolorGraph.adjacency_dict = {1: [[12, 'r'], [11, 'r'], [8, 'r']], 2: [[8, 'b'], [5, 'b'], [6, 'b']], 3: [[6, 'r'], [7, 'r'], [10, 'r']], 4: [[10, 'b'], [13, 'b'], [12, 'b']], 5: [[8, 'r'], [9, 'b'], [6, 'r'], [2, 'b']], 6: [[5, 'r'], [9, 'b'], [7, 'b'], [3, 'r'], [2, 'b']], 7: [[6, 'b'], [9, 'r'], [10, 'b'], [3, 'r']], 8: [[1, 'r'], [11, 'b'], [9, 'r'], [5, 'r'], [2, 'b']], 9: [[8, 'r'], [11, 'r'], [12, 'b'], [13, 'b'], [10, 'r'], [7, 'r'], [6, 'b'], [5, 'b']], 10: [[9, 'r'], [13, 'r'], [4, 'b'], [3, 'r'], [7, 'b']], 11: [[1, 'r'], [12, 'b'], [9, 'r'], [8, 'b']], 12: [[11, 'b'], [1, 'r'], [4, 'b'], [13, 'r'], [9, 'b']], 13: [[12, 'r'], [4, 'b'], [10, 'r'], [9, 'b']]}
#内部頂点27
#bicolorGraph.adjacency_dict = {1: [[6, 'r'], [5, 'r'], [8, 'r'], [12, 'r'], [16, 'r']], 2: [[16, 'b'], [20, 'b'], [24, 'b'], [28, 'b'], [29, 'b']], 3: [[29, 'r'], [30, 'r'], [31, 'r'], [27, 'r'], [23, 'r'], [19, 'r']], 4: [[19, 'b'], [15, 'b'], [11, 'b'], [7, 'b'], [6, 'b']], 5: [[1, 'r'], [6, 'b'], [9, 'r'], [8, 'b']], 6: [[5, 'b'], [1, 'r'], [4, 'b'], [7, 'r'], [9, 'b']], 7: [[6, 'r'], [4, 'b'], [11, 'r'], [10, 'b'], [9, 'r']], 8: [[1, 'r'], [5, 'b'], [9, 'r'], [12, 'b']], 9: [[8, 'r'], [5, 'r'], [6, 'b'], [7, 'r'], [10, 'r'], [14, 'b'], [13, 'r'], [12, 'r']], 10: [[9, 'r'], [7, 'b'], [11, 'r'], [14, 'b']], 11: [[10, 'r'], [7, 'r'], [4, 'b'], [15, 'r'], [14, 'b']], 12: [[1, 'r'], [8, 'b'], [9, 'r'], [13, 'b'], [16, 'b']], 13: [[12, 'b'], [9, 'r'], [14, 'b'], [17, 'b'], [16, 'r']], 14: [[13, 'b'], [9, 'b'], [10, 'b'], [11, 'b'], [15, 'b'], [19, 'r'], [18, 'b'], [17, 'r']], 15: [[14, 'b'], [11, 'r'], [4, 'b'], [19, 'r']], 16: [[1, 'r'], [12, 'b'], [13, 'r'], [17, 'r'], [20, 'r'], [2, 'b']], 17: [[16, 'r'], [13, 'b'], [14, 'r'], [18, 'r'], [22, 'b'], [21, 'b'], [20, 'b']], 18: [[17, 'r'], [14, 'b'], [19, 'r'], [22, 'b']], 19: [[18, 'r'], [14, 'r'], [15, 'r'], [4, 'b'], [3, 'r'], [23, 'b'], [22, 'r']], 20: [[16, 'r'], [17, 'b'], [21, 'r'], [25, 'r'], [24, 'r'], [2, 'b']], 21: [[20, 'r'], [17, 'b'], [22, 'r'], [26, 'b'], [25, 'b']], 22: [[21, 'r'], [17, 'b'], [18, 'b'], [19, 'r'], [23, 'b'], [26, 'r']], 23: [[22, 'b'], [19, 'b'], [3, 'r'], [27, 'b'], [26, 'r']], 24: [[20, 'r'], [25, 'b'], [28, 'r'], [2, 'b']], 25: [[24, 'b'], [20, 'r'], [21, 'b'], [26, 'r'], [30, 'r'], [29, 'b'], [28, 'b']], 26: [[25, 'r'], [21, 'b'], [22, 'r'], [23, 'r'], [27, 'r'], [31, 'r'], [30, 'b']], 27: [[26, 'r'], [23, 'b'], [3, 'r'], [31, 'b']], 28: [[24, 'r'], [25, 'b'], [29, 'r'], [2, 'b']], 29: [[28, 'r'], [25, 'b'], [30, 'b'], [3, 'r'], [2, 'b']], 30: [[29, 'b'], [25, 'r'], [26, 'b'], [31, 'b'], [3, 'r']], 31: [[30, 'b'], [26, 'r'], [27, 'b'], [3, 'r']]}
#A4Cの中にA4C(内部頂点10)
#bicolorGraph.adjacency_dict = {1: [[7, 'r'], [5, 'r']], 2: [[5, 'b'], [6, 'b']], 3: [[6, 'r'], [8, 'r']], 4: [[8, 'r'], [7, 'b']], 5: [[1, 'r'], [7, 'b'], [10, 'b'], [9, 'b'], [6, 'r'], [2, 'b']], 6: [[5, 'r'], [9, 'r'], [11, 'r'], [8, 'b'], [3, 'r'], [2,'b']], 7: [[1, 'r'], [4, 'b'], [8, 'r'], [12, 'r'], [10, 'r'], [5, 'b']], 8: [[12, 'b'], [7, 'r'], [4, 'b'], [3, 'r'], [6, 'b'], [11, 'b']], 9: [[5, 'b'], [10, 'r'], [13, 'b'], [11, 'b'], [6, 'r']], 10: [[7, 'r'], [12, 'b'], [14, 'r'], [13, 'r'], [9, 'r'], [5, 'b']], 11: [[9, 'b'], [13, 'r'], [14, 'r'], [12, 'r'], [8, 'b'], [6, 'r']], 12: [[10, 'b'], [7, 'r'], [8, 'b'], [11, 'r'], [14, 'b']], 13: [[10, 'r'], [14, 'b'], [11, 'r'], [9, 'b']], 14: [[10, 'r'], [12, 'b'], [11, 'r'], [13, 'b']]}
#重なり合ったA4C(内部頂点14)
#bicolorGraph.adjacency_dict = {1 : [[7, 'r'], [6, 'r'], [5, 'r']], 2 : [[5, 'b'], [9, 'b'], [8, 'b']], 3 : [[8, 'r'], [12, 'r'], [16, 'r']], 4 : [[16, 'b'], [17, 'b'], [18, 'b']], 5 : [[1, 'r'], [6, 'b'], [9, 'r'], [2, 'b']], 6 : [[1, 'r'], [7, 'b'], [11, 'r'], [10, 'b'], [9, 'b'], [5, 'b']], 7 : [[1, 'r'], [4, 'b'], [11, 'r'], [6, 'b']], 8 : [[9, 'r'], [12, 'b'], [3, 'r'], [2, 'b']], 9 : [[5, 'r'], [6, 'b'], [10, 'r'], [14, 'r'], [13, 'r'], [12, 'r'], [8, 'r'], [2, 'b']], 10 : [[6, 'b'], [11, 'r'], [14, 'b'], [9, 'r']], 11 : [[7, 'r'], [4, 'b'], [15, 'r'], [14, 'b'], [10, 'r'], [6, 'r']], 12 : [[8, 'b'], [9, 'r'], [13, 'b'], [17, 'b'], [16, 'b'], [3, 'r']], 13 : [[9, 'r'], [14, 'b'], [17, 'r'], [12, 'b']], 14 : [[10, 'b'], [11, 'b'], [15, 'b'], [18, 'b'], [17, 'r'], [13, 'b'], [9, 'r']], 15 : [[11, 'r'], [4, 'b'], [18, 'r'], [14, 'b']], 16 : [[12, 'b'], [17, 'r'], [4, 'b'], [3, 'r']], 17 : [[13, 'r'], [14, 'r'], [18, 'r'], [4, 'b'], [16, 'r'], [12, 'b']], 18 : [[14, 'b'], [15, 'r'], [4, 'b'], [17, 'r']]}

#内部頂点9
#bicolorGraph.adjacency_dict = {1 : [[13, 'r'], [10, 'r'], [7, 'r']], 2 : [[7, 'b'], [6, 'b'], [5, 'b']], 3 : [[5, 'r'], [8, 'r'], [11, 'r']], 4 : [[11, 'b'], [12, 'b'], [13, 'b']], 5 : [[6, 'r'], [8, 'b'], [3, 'r'], [2, 'b']], 6 : [[7, 'r'], [10, 'b'], [9, 'r'], [8, 'r'], [5, 'r'], [2, 'b']], 7 : [[1, 'r'], [10, 'b'], [6, 'r'], [2, 'b']], 8 : [[5, 'b'], [6, 'r'], [9, 'b'], [12, 'b'], [11, 'b'], [3, 'r']], 9 : [[6, 'r'], [10, 'b'], [12, 'r'], [8, 'b']], 10 : [[7, 'b'], [1, 'r'], [13, 'b'], [12, 'r'], [9, 'b'], [6, 'b']], 11 : [[8, 'b'], [12, 'r'], [4, 'b'], [3, 'r']], 12 : [[9, 'r'], [10, 'r'], [13, 'r'], [4, 'b'], [11, 'r'], [8, 'b']], 13 : [[10, 'b'], [1, 'r'], [4, 'b'], [12, 'r']]}
#A4Cの内部に↑の9頂点(内部頂点13)
#bicolorGraph.adjacency_dict = {1 : [[6, 'r'], [5, 'r']], 2 : [[5, 'b'], [16, 'b']], 3 : [[16, 'r'], [17, 'r']], 4 : [[17, 'b'], [6, 'b']], 5 : [[1, 'r'], [6, 'b'], [9, 'r'], [8, 'r'], [7, 'r'], [16, 'r'], [2, 'b']], 6 : [[4, 'b'], [17, 'r'], [15, 'b'], [12, 'b'], [9, 'b'], [5, 'b'], [1, 'r']], 7 : [[8, 'b'], [10, 'r'], [16, 'b'], [5, 'r']], 8 : [[9, 'b'], [12, 'r'], [11, 'b'], [10, 'b'], [7, 'b'], [5, 'r']], 9 : [[6, 'b'], [12, 'r'], [8, 'b'], [5, 'r']], 10 : [[7, 'r'], [8, 'b'], [11, 'r'], [14, 'r'], [13, 'r'], [16, 'b']], 11 : [[8, 'b'], [12, 'r'], [14, 'b'], [10, 'r']], 12 : [[9, 'r'], [6, 'b'], [15, 'r'], [14, 'b'], [11, 'r'], [8, 'r']], 13 : [[10, 'r'], [14, 'b'], [17, 'r'], [16, 'b']], 14 : [[11, 'b'], [12, 'b'], [15, 'b'], [17, 'r'], [13, 'b'], [10, 'r']], 15 : [[12, 'r'], [6, 'b'], [17, 'r'], [14, 'b']], 16 : [[5, 'r'], [7, 'b'], [10, 'b'], [13, 'b'], [17, 'b'], [3, 'r'], [2, 'b']], 17 : [[6, 'r'], [4, 'b'], [3, 'r'], [16, 'b'], [13, 'r'], [14, 'r'], [15, 'r']]}
#A4Cの内部に↑の9頂点(内部頂点17)
#bicolorGraph.adjacency_dict = {1 : [[7, 'r'], [6, 'r'], [5, 'r']], 2 : [[5, 'b'], [8, 'b'], [19, 'b']], 3 : [[19, 'r'], [20, 'r'], [21, 'r']], 4 : [[21, 'b'], [18, 'b'], [7, 'b']], 5 : [[1, 'r'], [6, 'b'], [8, 'r'], [2, 'b']], 6 : [[1, 'r'], [7, 'b'], [18, 'r'], [14, 'b'], [11, 'b'], [9, 'b'], [8, 'b'], [5, 'b']], 7 : [[1, 'r'], [4, 'b'], [18, 'r'], [6, 'b']], 8 : [[5, 'r'], [6, 'b'], [9, 'r'], [10, 'r'], [12, 'r'], [20, 'r'], [19, 'r'], [2,'b']], 9 : [[6, 'b'], [11, 'r'], [10, 'b'], [8, 'r']], 10 : [[9, 'b'], [11, 'r'], [13, 'b'], [15, 'b'], [12, 'b'], [8, 'r']], 11 : [[14, 'r'], [16, 'b'], [13, 'r'], [10, 'r'], [9, 'r'], [6, 'b']], 12 : [[10, 'b'], [15, 'r'], [20, 'b'], [8, 'r']], 13 : [[11, 'r'], [16, 'b'], [15, 'r'], [10, 'b']], 14 : [[18, 'r'], [16, 'b'], [11, 'r'], [6, 'b']], 15 : [[10, 'b'], [13, 'r'], [16, 'r'], [17, 'r'], [20, 'b'], [12, 'r']], 16 : [[11, 'b'], [14, 'b'], [18, 'r'], [17, 'b'], [15, 'r'], [13, 'b']], 17 : [[16, 'b'], [18, 'r'], [20, 'b'], [15, 'r']], 18 : [[7, 'r'], [4, 'b'], [21, 'r'], [20, 'b'], [17, 'r'], [16, 'r'], [14, 'r'], [6, 'r']], 19 : [[8, 'r'], [20, 'b'], [3, 'r'], [2, 'b']], 20 : [[17, 'b'], [18, 'b'], [21, 'b'], [3, 'r'], [19, 'b'], [8, 'r'], [12, 'b'], [15, 'b']], 21 : [[18, 'r'], [4, 'b'], [3, 'r'], [20,'b']]}
#いろいろ
#bicolorGraph.adjacency_dict = {1: [[15, 'r'], [11, 'r'], [5,'r']], 2: [[5, 'b'], [14, 'b'], [9, 'b'], [7, 'b'], [8, 'b']], 3: [[8, 'r'], [17, 'r']], 4: [[17, 'b'], [13, 'b'], [6, 'b'], [16, 'b'], [15, 'b']], 5: [[1, 'r'], [11, 'b'], [14, 'r'], [2, 'b']], 6: [[16, 'r'], [4, 'b'], [13, 'r'], [12, 'b']], 7: [[12, 'b'], [13, 'b'], [8, 'r'], [2, 'b'], [9, 'r']], 8: [[7, 'r'], [13, 'b'], [17, 'b'], [3, 'r'], [2, 'b']], 9: [[14, 'r'], [12, 'b'], [7, 'r'], [2, 'b']], 10: [[11, 'b'], [16, 'r'], [12, 'b'], [14, 'r']], 11: [[1, 'r'], [15, 'b'], [16, 'r'], [10, 'b'], [14, 'b'], [5, 'b']], 12: [[10, 'b'], [16, 'b'], [6, 'b'], [13, 'r'], [7, 'b'], [9, 'b'], [14, 'r']], 13: [[6, 'r'], [4, 'b'], [17, 'r'], [8, 'b'], [7, 'b'], [12, 'r']], 14: [[5, 'r'], [11, 'b'], [10, 'r'], [12, 'r'], [9, 'r'], [2, 'b']], 15: [[4, 'b'], [16, 'r'], [11, 'b'], [1, 'r']], 16: [[15, 'r'], [4, 'b'], [6, 'r'], [12, 'b'], [10, 'r'], [11, 'r']], 17: [[13, 'r'], [4, 'b'], [3, 'r'], [8, 'b']]}
#
bicolorGraph.adjacency_dict ={1: [[9, 'r'], [6, 'r'], [5, 'r']], 2: [[5, 'b'], [7, 'b']], 3: [[7, 'r'], [10, 'r'], [11, 'r']], 4: [[11, 'b'], [9, 'b']], 5: [[1, 'r'], [6, 'b'], [7, 'r'], [2, 'b']], 6: [[1, 'r'], [9, 'b'], [8, 'r'], [7, 'b'], [5, 'b']], 7: [[5, 'r'], [6, 'b'], [8, 'b'], [10, 'b'], [3, 'r'], [2, 'b']], 8: [[6, 'r'], [9, 'b'], [10, 'r'], [7, 'b']], 9: [[1, 'r'], [4, 'b'], [11, 'r'], [10, 'r'], [8, 'b'], [6, 'b']], 10: [[8, 'r'], [9, 'r'], [11, 'b'], [3, 'r'], [7, 'b']], 11: [[9, 'r'], [4, 'b'], [3, 'r'], [10, 'b']]}

makeMaximal(bicolorGraph.adjacency_dict)
bicolorGraph.print_TEP()
T = bicolorGraph.adjacency_dict

starttime = time.time()
children = findChildren(T, [], 0)
endtime = time.time()

print("maxdepth", maxdepth)
print("size of childeren", len(children))
print("time", endtime - starttime)
print(len(children)/(endtime - starttime), "enum/s")